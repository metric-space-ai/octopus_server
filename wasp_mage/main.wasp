app waspAi {
  wasp: {
    version: "^0.11.5"
  },
  title: "MAGE - GPT Web App Generator ✨",
  head: [
    "<meta property=\"og:title\" content=\"MAGE GPT Web App Generator ✨ MageGPT\">",
    "<meta property=\"og:description\" content=\"Generate your full-stack React, Node.js and Prisma web app using the magic of GPT and the Wasp full-stack framework.\">",
    "<meta property=\"og:type\" content=\"website\">",
    "<meta property=\"og:image\" content=\"https://usemage.ai/twitter.png\">",
    "<meta name=\"twitter:image\" content=\"https://usemage.ai/twitter.png\" />",
    "<meta name=\"twitter:image:width\" content=\"800\" />",
    "<meta name=\"twitter:image:height\" content=\"400\" />",
    "<meta name=\"twitter:card\" content=\"summary_large_image\" />",
    "<script defer data-domain=\"usemage.ai\" src=\"https://plausible.apps.twoducks.dev/js/script.js\"></script>",
  ],
  dependencies: [
    ("prismjs", "^1.29.0"),
    ("react-accessible-treeview", "2.6.1"),
    ("react-icons", "4.10.1"),
    ("@zip.js/zip.js", "2.7.16"),
    ("async-mutex", "0.4.0"),
    ("@headlessui/react", "1.7.15"),
    ("@heroicons/react", "2.0.18"),
    ("react-parallax-tilt", "1.7.151"),
    ("timeago.js", "4.0.2"),
    ("@visx/mock-data", "3.0.0"),
    ("@visx/group", "3.0.0"),
    ("@visx/shape", "3.0.0"),
    ("@visx/scale", "3.2.0"),
    ("@visx/responsive", "3.0.0"),
    ("@visx/gradient", "3.0.0"),
    ("@visx/axis", "3.2.0"),
    ("js-confetti", "0.11.0")
  ],
  db: {
    system: PostgreSQL
  },
}


route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.tsx"
}

action startGeneratingNewApp {
  fn: import { startGeneratingNewApp } from "@server/operations.js",
  entities: [
    Project,
  ]
}

action registerZipDownload {
  fn: import { registerZipDownload } from "@server/operations.js",
  entities: [Project]
}



query getAppGenerationResult {
  fn: import { getAppGenerationResult } from "@server/operations.js",
  entities: [
    Project
  ]
}

query getProjects {
  fn: import { getProjects } from "@server/operations.js",
  entities: [
    Project
  ]
}

query getStats {
  fn: import { getStats } from "@server/operations.js",
  entities: [
    Project
  ]
}

query getNumProjects {
  fn: import { getNumProjects } from "@server/operations.js",
  entities: [
    Project
  ]
}


entity Project {=psl
  id String @id @default(uuid())
  name String
  description String
  primaryColor String @default("sky")
  authMethod String @default("usernameAndPassword")
  creativityLevel String @default("balanced")
  createdAt DateTime @default(now())
  status String @default("pending")
  referrer String @default("unknown")
  zipDownloadedAt DateTime?
  files File[]
  logs Log[]
psl=}

entity File {=psl
  id String @id @default(uuid())
  name String
  content String
  createdAt DateTime @default(now())
  projectId String
  project Project @relation(fields: [projectId], references: [id])

  @@index([name, projectId])
psl=}

entity Log {=psl
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  projectId String
  project Project @relation(fields: [projectId], references: [id])
psl=}

job checkPendingAppsJob {
  executor: PgBoss,
  schedule: {
    cron: "* * * * *",
  },
  perform: {
    fn: import { checkForPendingApps } from "@server/jobs/checkForPendingApps.js"
  },
  entities: [Project]
}

job failStaleAppsJobs {
  executor: PgBoss,
  schedule: {
    cron: "* * * * *",
  },
  perform: {
    fn: import { failStaleGenerations } from "@server/jobs/failStaleGenerations.js",
  },
  entities: [Project, Log]
}

job generateAppJob {
  executor: PgBoss,
  perform: {
    fn: import { generateApp } from "@server/jobs/generateApp.js",
  },
  entities: [
    Project,
    File,
    Log
  ]
}